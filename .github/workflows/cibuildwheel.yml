name: "Build Wheels"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.type }}
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      fail-fast:
        description: "Fail fast setting for building wheels."
        default: true
        required: false
        type: boolean
      deploy:
        description: "Allow deployment of build wheels."
        default: true
        required: false
        type: boolean
    secrets:
      PYPI_PASSWORD:
        description: "Token for pypi."
        required: false

jobs:
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.autotag.outputs.tagsha }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        name: Switch to using Python 3.x
        with:
          python-version: 3.x

      - name: Update pip
        run: |
          python -m pip install --upgrade pip setuptools wheel

      - name: Build sdist
        run: |
          python -m pip install "pybind11[global]"
          python setup.py sdist

      - name: Store source distribution
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: ./dist/*tar.gz

      - name: Check source distribution
        run: |
          mkdir -p /tmp/installation_dir && cd /tmp/installation_dir
          python -m pip install -v $( ls ${GITHUB_WORKSPACE}/dist/*.tar.gz )
          cd /tmp && python -c "import pyPublicDecompWT"
          cd ${GITHUB_WORKSPACE}

      - name: Store package version
        run: echo 'version='`pip show pyPublicDecompWT | grep "Version:" | cut -c 10-` > .package_version

      - name: Autoadd release Tags
        uses: sbrodehl/action-autotag@v3
        id: autotag
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          source_file: ".package_version"
          # this is the PEP 440 regex https://github.com/pypa/packaging/blob/21.3/packaging/version.py#L225
          # with a capture group (around everything), but all other groups are non capturing
          # double escape's where necessary
          extraction_regex: "version\\s*=\\s*[\\'\"]*((\\d+!)?(\\d+)(\\.\\d+)*([\\.\\-\\_])?((a(lpha)?|b(eta)?|c|r(c|ev)?|pre(view)?)\\d*)?(\\.?(post|dev)\\d*)?)[\\'\"]*"
          capture_group: 1
          tag_message: "Release"
          tag_format: "v{version}"

      - name: Show version
        if: steps.autotag.outputs.tagsha
        run: echo ${{ steps.autotag.outputs.tagsha }}

      - name: Publish to PyPI
        if: ${{ steps.autotag.outputs.tagsha && inputs.deploy }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          user: __token__
          password: ${{ secrets.PYPI_PASSWORD }}

  testing:
    needs: [build_sdist]
    if: ${{ needs.build_sdist.outputs.sha && inputs.deploy }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: 'true'

      - uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Build and install
        run: pip install --verbose .[test]

      - name: Run Tests
        run: cd tests && pytest

  build-wheels:
    needs: [build_sdist]
    if: ${{ needs.build_sdist.outputs.sha && inputs.deploy }}
    name: Build wheels on ${{ matrix.os }} (${{ matrix.cibw_archs }})
    runs-on: ${{ matrix.os }}
    env:
      CIBW_ARCHS_MACOS: "x86_64 arm64"
      CIBW_SKIP: "*_i686 *-win32 *-musllinux_*"
    strategy:
      fail-fast: ${{ inputs.fail-fast }}
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        cibw_archs: ["auto"]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version:  3.x

      - name: Install requirements
        run: |
          python -m pip install cibuildwheel

      - name: Build wheels for Python 3.10+
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: "{c,p}p3*"
          CIBW_SKIP: "{c,p}p3{6..9}-*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
          CIBW_BEFORE_BUILD: python -m pip install -U pip setuptools wheel
          CIBW_ARCHS: ${{ matrix.cibw_archs }}

      - name: Build wheels for Python 3.7 / 3.8 / 3.9
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: "{c,p}p37-* {c,p}p38-* {c,p}p39-*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
          CIBW_BEFORE_BUILD: python -m pip install -U pip
          CIBW_ARCHS: ${{ matrix.cibw_archs }}

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.cibw_archs }}
          path: ./dist/*.whl

  deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [build_sdist, build-wheels, testing]
    if: ${{ needs.build_sdist.outputs.sha && inputs.deploy }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist/
          merge-multiple: true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          user: __token__
          password: ${{ secrets.PYPI_PASSWORD }}
